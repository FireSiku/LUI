-- ####################################################################################################################
-- ##### Setup and Locals #############################################################################################
-- ####################################################################################################################

---@type string, Opt
local optName, Opt = ...
local L, module, db = Opt:GetLUIModule("ActionBars")
if not module or not module.registered then return end

-- ####################################################################################################################
-- ##### Utility Functions ############################################################################################
-- ####################################################################################################################


-- ####################################################################################################################
-- ##### Options Table ################################################################################################
-- ####################################################################################################################

Opt.options.args.ActionBars = Opt:Group("Cooldown", nil, nil, "tab", true, nil, Opt.GetSet(db))
Opt.options.args.ActionBars.handler = module
local ActionBars = {

}

Opt.options.args.ActionBars.args = ActionBars